@page "/TODOList"

@using Interfaces
@using Data

@rendermode InteractiveServer

@inject ITodoListService _servise

<div>
    <h3>ToDo:</h3>
    <div>
        <TodoListAdd OnAfterItemAdded="OnAfterAddedTaskItem"/>
        <button class="btn btn-outline-primary" @onclick="AllList">Все</button>
        <button class="btn btn-outline-primary" @onclick="ListCompleted">Выполненые</button>
        <button class="btn btn-outline-primary" @onclick="ListActive">Активные</button>
        <button class="btn btn-outline-success" @onclick="OnInitializedAsync">Обновить</button>
        
        <div class="btn-group">
            <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                ...
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" type="button" @onclick="SortAlphabetically">По Алфавиту</a></li>

            </ul>
        </div>

    </div>
    <div>
        <div>Шапка</div>
        
        <TodoList TodoItems="todoItemsFiltered" 
                  TodoListService="_servise"
                  TaskListPage="taskListPage" 
                  OnAfterItemChengeInStatus="OnAfterItemChangeInStatus"/>
    </div>
</div>

@code {

    private List<TodoItem> todoItems { get; set; } = new();
    private List<TodoItem> todoItemsFiltered { get; set; } = new();
    private LastActiveButton lastActiveButton { get; set; }
    [Parameter] public TaskList taskListPage { get; set; }
    private bool OrganizeTaskByDescending { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await GetAllTodos();
    }

    private async Task GetAllTodos()
    {
        todoItems = await _servise.TodoListAllAsync();
        PageActive();
    }

    private void OnAfterItemChangeInStatus(TodoItem val)
    {
        PageActive();
    }

    private void OnAfterAddedTaskItem(TodoItem val)
    {
        todoItems.Add(val);
        PageActive();
    }

    private void AllList()
    {
        todoItemsFiltered = todoItems;
        lastActiveButton = LastActiveButton.AllList;
    }

    private void ListCompleted()
    {
        todoItemsFiltered = todoItems.Where(_ => _.Completed).ToList();
        lastActiveButton = LastActiveButton.ListCompleted;
    }

    private void ListActive()
    {
        todoItemsFiltered = todoItems.Where(_ => !_.Completed).ToList();
        lastActiveButton = LastActiveButton.ListActive;
    }

    private void SortAlphabetically()
    {
        if (OrganizeTaskByDescending)
        {
            todoItems = todoItems
                .OrderByDescending(x => x.Name).ToList();
            OrganizeTaskByDescending = false;
            PageActive();
        }
        else
        {
            todoItems = todoItems.OrderBy(x => x.Name).ToList();
            OrganizeTaskByDescending = true;
            PageActive();
        }
    }
        

    private void PageActive()
    {
        switch (lastActiveButton)
        {
            case LastActiveButton.AllList:
                AllList();
                break;
            case LastActiveButton.ListCompleted:
                ListCompleted();
                break;
            case LastActiveButton.ListActive:
                ListActive();
                break;
        }
    }


    private enum LastActiveButton
    {
        AllList,
        ListCompleted,
        ListActive
    }

}