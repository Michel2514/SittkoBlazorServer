@page "/TODOList"

@using Interfaces
@using Data

@rendermode InteractiveServer

@inject ITodoListService _servise


<h3>ToDo:</h3>
<TodoListAdd OnAfterItemAdded="OnAfterAddedTaskItem" />
<button class="btn btn-primary" @onclick="AllList">Все</button>
<button class="btn btn-primary" @onclick="ListCompleted">Выполненые</button>
<button class="btn btn-primary" @onclick="ListActive">Активные</button>

<button class="btn btn-primary" @onclick="OnInitializedAsync">Обновить</button>
<div>
    <div>Шапка</div>
    <TodoList TodoItems="todoItemsFiltered" TodoListService="_servise"
              TaskListPage="taskListPage" OnAfterItemChengeInStatus="OnAfterItemChengeInStatus" />
</div>


@code {

    private List<TodoItem> todoItems { get; set; } = new();
    private List<TodoItem> todoItemsFiltered { get; set; } = new();
    [Parameter]
    public TaskList taskListPage { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await GetAllTodos();
        AllList();
    }

    private async Task GetAllTodos()
    {
        todoItems = await _servise.TodoListAllAsync();
    }
    private async Task OnAfterItemChengeInStatus(TodoItem val)
    {
        if (val.Completed == true)
            ListActive();
        else
            ListCompleted();
    }
    private async Task OnAfterAddedTaskItem(TodoItem val)
    {
        todoItems.Add(val);

        if (todoItemsFiltered.FirstOrDefault().Completed == false)
            ListActive();
        else
            ListCompleted();
    }

    private void AllList()
    {

        todoItemsFiltered = todoItems;
    }

    void ListCompleted()
    {
        todoItemsFiltered = todoItems.Where(_ => _.Completed).ToList();
    }

    void ListActive()
    {
        todoItemsFiltered = todoItems.Where(_ => !_.Completed).ToList();
    }

}