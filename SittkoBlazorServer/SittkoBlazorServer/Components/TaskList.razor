@page "/"
@using Interfaces
@using Data
@rendermode InteractiveServer
@inject ITodoListService _servise

<div>
    <MudItem>
        <MudGrid>
            <MudCardContent Class="object-center">
                <TodoListAdd OnAfterItemAdded="OnAfterAddedTaskItem"/>
                <MudCardActions Class="align-center justify-center">
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                        <MudButton @onclick="AllList">Все</MudButton>
                        <MudButton @onclick="ListCompleted">Выполненые</MudButton>
                        <MudButton @onclick="ListActive">Активные</MudButton> 
                        
                    </MudButtonGroup>
                </MudCardActions>
            </MudCardContent>

        </MudGrid>

            <MudStack Class="align-center justify-center" Row="true">
                <MudText Typo="Typo.h4" Class="re">Список задач</MudText>
            @* <MudMenu Icon="@Icons.Material.Outlined.FilterAlt" AriaLabel="Open user menu">
                    <MudMenuItem Label="Profile" />
                    <MudMenuItem Label="My account" />
                    <MudMenuItem Label="Logout" />
                </MudMenu> *@
            </MudStack>

    </MudItem>
   
    <div>
        
        <TodoList TodoItems="todoItemsFiltered"
                  TodoListService="_servise"
                  TaskListPage="taskListPage"
                  OnAfterItemChengeInStatus="OnAfterItemChangeInStatus"/>
    </div>
</div>




@code {
    private List<TodoItem> todoItemsFiltered { get; set; } = new();
    [Parameter] public TaskList taskListPage { get; set; }

    private LastActiveButton lastActiveButton;
    private List<TodoItem> todoItems = new();
    private bool OrganizeTaskByDescendingAlphabetically;
    private bool OrganizeTaskByDescendingExecutionDate;
    private bool OrganizeTaskByDescendingCreationDate;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await GetAllTodos();
    }

    private async Task GetAllTodos()
    {
        todoItems = await _servise.TodoListAllAsync();
        PageActive();
    }

    private void OnAfterItemChangeInStatus(TodoItem val)
    {
        PageActive();
    }

    private void OnAfterAddedTaskItem(TodoItem val)
    {
        todoItems.Add(val);
        PageActive();
    }

    private void AllList()
    {
        todoItemsFiltered = todoItems;
        lastActiveButton = LastActiveButton.AllList;
    }

    private void ListCompleted()
    {
        todoItemsFiltered = todoItems.Where(_ => _.Completed).ToList();
        lastActiveButton = LastActiveButton.ListCompleted;
    }

    private void ListActive()
    {
        todoItemsFiltered = todoItems.Where(_ => !_.Completed).ToList();
        lastActiveButton = LastActiveButton.ListActive;
    }

    private void SortAlphabetically()
    {
        if (OrganizeTaskByDescendingAlphabetically)
        {
            todoItems = todoItems
                .OrderByDescending(x => x.Name).ToList();
            OrganizeTaskByDescendingAlphabetically = false;
            PageActive();
        }
        else
        {
            todoItems = todoItems.OrderBy(x => x.Name).ToList();
            OrganizeTaskByDescendingAlphabetically = true;
            PageActive();
        }
    }
  
    private void SortExecutionDate()
    {
        if (OrganizeTaskByDescendingExecutionDate)
        {
            todoItems = todoItems
                .OrderByDescending(x => x.ExecutionDate).ToList();
            OrganizeTaskByDescendingExecutionDate = false;
            PageActive();
        }
        else
        {
            todoItems = todoItems.OrderBy(x => x.ExecutionDate).ToList();
            OrganizeTaskByDescendingExecutionDate = true;
            PageActive();
        }
    }

    private void SortCreationDate()
    {
        if (OrganizeTaskByDescendingCreationDate)
        {
            todoItems = todoItems
                .OrderByDescending(x => x.CreationDate).ToList();
            OrganizeTaskByDescendingCreationDate = false;
            PageActive();
        }
        else
        {
            todoItems = todoItems.OrderBy(x => x.CreationDate).ToList();
            OrganizeTaskByDescendingCreationDate = true;
            PageActive();
        }
    }

    private void PageActive()
    {
        switch (lastActiveButton)
        {
            case LastActiveButton.AllList:
                AllList();
                break;
            case LastActiveButton.ListCompleted:
                ListCompleted();
                break;
            case LastActiveButton.ListActive:
                ListActive();
                break;
        }
    }


}